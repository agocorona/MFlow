<h1>A Web Application in a tweet:</h1>
<blockquote class="twitter-tweet" lang="es"><p>Web app in a tweet: do{n1&lt;-get; n2&lt;-get; ask$p&lt;&lt;(n1+n2)++&gt;wlink () "click"} 
where get= ask$ getInt Nothing <a href="https://twitter.com/search?q=%23Haskell&amp;src=hash">#Haskell</a> <a href="http://t.co/XAGFv1gXFL">http://t.co/XAGFv1gXFL</a></p>â€” Alberto G. Corona (@AGoCorona) <a href="https://twitter.com/AGoCorona/statuses/329648864082677760">Mayo 1, 2013</a></blockquote>
<script async="" src="//platform.twitter.com/widgets.js" charset="utf-8"></script>
<h1><i>New&nbsp;</i><img src="http://icons.iconarchive.com/icons/custom-icon-design/pretty-office-11/32/new-icon.png" alt="" align="none" style="text-align: justify; font-size: xx-large; font-family: 'Trebuchet MS', Helvetica, Arial, Verdana, sans-serif;"></h1><div><h1 style="text-align: justify;"><div style="text-align: start; font-weight: normal; font-size: 14px;"><ul><li>Coming soon: <a href="/noscript/wiki/browserwidgets" title="" target="">reactive MFlow widgets</a> running interactions fully in the browser. With the same notation!!. Choose if your widget will run in the browser or in the server (Or a mix).</li><li><a href="http://haskell-web.blogspot.com.es/2014/05/separation-of-concerns-by-problem.html" title="" target="">The MVC design pattern is not composable. Therefore, there is no true "separation of concerns"&nbsp;</a><span style="font-family: helvetica; font-size: x-small; text-align: center;">30/05/2014</span></li><li><font face="arial"><a href="http://www.reddit.com/r/haskell/comments/25yat8/web_apps_that_write_like_console_apps_school_of/" title="" target="">Web apps that write like console apps.</a> By <a href="https://www.fpcomplete.com/user/mwm" title="" target="">Mike Meyer</a>&nbsp;</font><span style="font-family: helvetica; font-size: x-small; text-align: center;">12/05/2014</span></li><li><font face="arial">How to configure your MFlow application <a href="/noscript/wiki/configuration" title="" target="">with getConfig</a>&nbsp;</font><span style="font-family: helvetica; font-size: x-small; text-align: center;">&nbsp;20/05/2014</span></li><li><font face="arial"><a href="http://haskell-web.blogspot.com.es/2014/04/towards-deeper-integration-web-language.html" title="" target="">The Grand Unification</a>:<a href="http://en.wikipedia.org/wiki/Theory_of_everything" title="" target=""><img src="http://www.ctc.cam.ac.uk/images/contentpics/cp_m_theory.jpg" width="30" height="15"></a>:&nbsp;The deep integration of event-driven user interfaces, transactional data and problem logic in a<span style="color: rgb(34, 34, 34); font-family: 'rebuchet MS', Helvetica, Arial, Verdana, sans-serif; font-size: 13.63636302947998px; line-height: 17.81818199157715px; text-align: justify; background-color: rgb(255, 255, 255);">&nbsp;web language &nbsp;</span></font><span style="font-family: helvetica; font-size: x-small; text-align: center;">04/04/2014</span></li><li><font face="arial">File uploads, with the fileUpload widget&nbsp;</font><span style="font-family: helvetica; font-size: x-small; text-align: center;">&nbsp;20/05/2014</span></li><li><font face="arial">The internals of MFlow:&nbsp;<a href="http://themonadreader.files.wordpress.com/2014/04/mflow.pdf" style="padding: 0px; margin: 0px; color: rgb(0, 68, 119); text-decoration: underline; font-size: 13px; line-height: 18px; background-color: rgb(255, 255, 255);">MFlow, a continuation-based web framework without continuations</a><span style="color: rgb(34, 34, 34); font-size: 13px; line-height: 18px; background-color: rgb(255, 255, 255);">&nbsp; has been published in the last issue of &nbsp;<a href="http://themonadreader.wordpress.com/2014/04/23/issue-23/" title="" target="">The Monad Reader</a></span><br></font></li><li style="font-family: 'rebuchet MS', Helvetica, Arial, Verdana, sans-serif;"><a href="/noscript/lazyload" title="" target="">Lazy</a>: to load a portion of a page asynchronously when it becomes visible&nbsp;<span style="font-family: helvetica; font-size: x-small; text-align: center;">28/04/2014</span></li><li style="font-family: 'rebuchet MS', Helvetica, Arial, Verdana, sans-serif;"><a href="/noscript/cachedataset" title="" target="">Navigating an (infinite) data set</a>&nbsp;in the browser with cached javascript programs generated by Haskell in the server.<span style="font-family: helvetica; font-size: x-small; text-align: center;">&nbsp;9/04/2014.</span></li><li style="font-family: 'rebuchet MS', Helvetica, Arial, Verdana, sans-serif;"><a href="/noscript/wiki/cachingdfield" title="" target="">Composable caching</a>: Now the programmer can express independently the caching policies for each widget.&nbsp;<span style="font-family: helvetica; font-size: x-small; text-align: center;">&nbsp;9/04/2014.</span></li><li style="font-family: 'rebuchet MS', Helvetica, Arial, Verdana, sans-serif;"><a href="http://haskell-web.blogspot.com.es/2014/04/towards-deeper-integration-web-language.html" title="" target="">Towards a deeper integration</a> at the component level: A Web language (blog post)&nbsp;<span style="font-family: helvetica; font-size: x-small; text-align: center;">4/04/2014</span><br></li></ul></div></h1><h1 style="text-align: justify;"><span style="font-family: 'rebuchet MS', Helvetica, Arial, Verdana, sans-serif;">10+ things that you can do with MFlow and you can't with your Web framework</span></h1></div><ol><li style="font-size: small;"><span style="white-space: pre-wrap; font-family: 'rebuchet MS', Helvetica, Arial, Verdana, sans-serif;">Create test, integrate and install your logic </span><b style="white-space: pre-wrap; font-family: 'rebuchet MS', Helvetica, Arial, Verdana, sans-serif;">without concern for layout</b><span style="white-space: pre-wrap; font-family: 'rebuchet MS', Helvetica, Arial, Verdana, sans-serif;">. Edit your forms, widgets, style and content </span><b style="white-space: pre-wrap; font-family: 'rebuchet MS', Helvetica, Arial, Verdana, sans-serif;">at run time.  </b><br></li><li style="font-size: small;"><span style="white-space: pre-wrap;">Convert your application from an active, single page app to multiple pages and back with little code modifications.</span><br></li><li style="font-size: small;"><span style="white-space: pre-wrap;">Make forms</span><span style="white-space: pre-wrap;"> that change the questions depending on your answers.</span><br></li><li style="font-size: small;"><span style="white-space: pre-wrap;">Make a cascade menu with dynamic options programmatically, in a single procedure.</span><br></li><li style="font-size: small;"><span style="white-space: pre-wrap;">Make an element of a page to refresh itself  independently by adding a single statement.</span><br></li><li><font size="2"><span style="white-space: pre-wrap;">Convert an element of a page to present its content in  push mode with a simple modifier.</span></font><br></li><li style="font-size: small;"><span style="white-space: pre-wrap;">Press back as many times as you like by default and get what you expected.</span><br></li><li style="font-size: small;"><span style="white-space: pre-wrap;">Write a <b>multi-page flow </b> -for example, a shopping cart checkout- and seamlessly  <b>reuse </b>it whenever you need it.</span></li><li style="font-size: small;"><span style="white-space: pre-wrap;"><b>Write an active page element </b>with his own server code, JS, CSS <b>in a single procedure</b> and </span><span style="white-space: pre-wrap;"> seamlessly  <b>reuse </b>it whenever you need it.</span></li><li style="font-size: small;"><span style="white-space: pre-wrap;">Write your routes and control logic as in a console application. <b>No spaguetti callback code.</b></span><br></li><li><font size="2"><span style="white-space: pre-wrap;">Transparently manage user session as normal program variables </span></font><b style="font-size: small; white-space: pre-wrap;">No </b><font size="2"><span style="white-space: pre-wrap;"><b>lockups</b>&nbsp;</span></font></li><li style="font-size: small;"><span style="white-space: pre-wrap;">transparently maintain the user session data for as long as you wish. even after shutdowns</span><br></li><li style="font-size: small;"><span style="white-space: pre-wrap; font-family: 'rebuchet MS', Helvetica, Arial, Verdana, sans-serif;">Have automatic persistence for your data for rapid testing of your prototype.</span><br></li><li style="font-size: small;"><span style="white-space: pre-wrap;">Make all of this without writing a single line of javaScript code. Although you can add it for your own needs.</span><br></li><li style="font-size: small;"><span style="white-space: pre-wrap;">Make all of this in a type safe way: <b>If your app compiles, it works</b>.</span><br></li><li style="font-size: small;"><span style="white-space: pre-wrap;">Make (almost) all of this work with or without javascript activated.</span><br></li><li style="font-size: small;"><span style="white-space: pre-wrap;">Make all of this in an architecture that is horizontally scalable (although not implemented such scalabiltiy yet)</span></li><li style="font-size: small;"><span style="white-space: pre-wrap;">Use MFlow as an <a href="https://www.fpcomplete.com/business/blog/guest-post-solve-integration-problem/" title="" target="">integration</a>, orchestration and Workflow platform for your company needs.</span></li></ol><p><span style="white-space: pre-wrap;"><font size="3"><b><i><br></i></b></font></span></p><p><span style="white-space: pre-wrap;"><font size="3"><b><i>More power and flexibility. Less plumbing. Less moving parts.</i></b>&nbsp;</font></span></p><div style="font-size: small;"><span style="white-space: pre-wrap;"><br></span></div><div><span style="white-space: pre-wrap;"><b><font size="3">You don't need to know Haskell before start learning MFlow.&nbsp;</font></b></span></div><div><span style="white-space: pre-wrap;"><b><font size="3"><br></font></b></span></div><div><span style="white-space: pre-wrap;"><font size="2">You will probably understand intuitively what this complete program do:</font></span></div><div><br></div><div><div><font face="courier new">&nbsp; import MFlow.Wai.Blaze.Html.All</font></div><div><font face="courier new"><br></font></div><div><font face="courier new">&nbsp; main= runNavigation "" . step $ do</font></div><div><font face="courier new">&nbsp; &nbsp; &nbsp; &nbsp;n &nbsp;&lt;- page $ getInt Nothing &lt;** submitButton "first"</font></div><div><font face="courier new">&nbsp; &nbsp; &nbsp; &nbsp;n' &lt;- page $ getInt Nothing &lt;** submitButton "second"</font></div><div><font face="courier new">&nbsp; &nbsp; &nbsp; &nbsp;page $ p &lt;&lt; ( n+n') ++&gt; wlink () &lt;&lt; b &lt;&lt; "One more time"</font></div></div><div><br></div><div><font size="3"><i><b>What you are waiting for?</b></i></font></div><div><br></div><div><a href="/noscript/wiki/howtoinstall" title="" target="">How to install MFlow</a></div><div><a href="https://www.fpcomplete.com/user/agocorona/MFlow-tutoria" title="" target="" style="font-size: small; font-family: 'rebuchet MS', Helvetica, Arial, Verdana, sans-serif;">Quick Start</a><span style="font-size: small; font-family: 'rebuchet MS', Helvetica, Arial, Verdana, sans-serif;">&nbsp; &nbsp; : Basics for understanding and using MFlow</span></div><div style="font-size: small;"><a href="https://www.fpcomplete.com/user/agocorona/MFlowDSL" title="" target="">Quick Start 2</a> : How to modify an application to add dynamic effects: implicit ajax, push etc.</div><div style="font-size: small;"><br></div><div><h1 style="text-align: justify;"><font face="helvetica" size="6"><span style="white-space: pre-wrap;"><i>Almost new:</i></span></font><span style="font-family: 'rebuchet MS', Helvetica, Arial, Verdana, sans-serif; font-size: 14px;">&nbsp;</span></h1><div style="font-size: 14px; font-family: 'rebuchet MS', Helvetica, Arial, Verdana, sans-serif;"><ul><li><a href="http://localhost/noscript/wiki/caching" title="" target="">Improved caching</a>: roundtrips to the server only when needed</li><li>An example of&nbsp;<b><a href="http://localhost/noscript/wiki/generateform" title="" target="">a small GUI-like application for the creation and edition of formularies</a></b>&nbsp;in which you can add form elements, modify the layout, add texts and styles etc. Then you can input data for the created form and see the results. This is the first reference implementation for&nbsp;<b>highly interactive applications</b>.</li><li><b><a href="http://mflowdemo.herokuapp.com/noscript/wiki/webservices" title="" target="">Web Services</a>&nbsp;</b>with parsec-like combinators&nbsp;</li><li>Encrypted cookies&nbsp;&nbsp;thanks to Aistis Raulinaitis in the&nbsp;<a href="https://github.com/agocorona/MFlow" title="" target="">github repository</a>.</li><li>In&nbsp;<a href="http://localhost/noscript/databasesamples" title="" target="">Database examples</a>&nbsp; there is a new example using&nbsp;<a href="http://localhost/noscript/databasesamples/acidstate" class="_noAutoRefresh" title="" target="">Acid State</a>&nbsp;that store and retrieve lines of text to/from&nbsp;<a href="http://hackage.haskell.org/package/acid-state">Acid State</a>. Thanks to Aistis Raulinaitis</li><li><span style="background-color: rgb(255, 255, 255);">In&nbsp;<a href="http://localhost/noscript/flows" title="" target="">Different kinds of flow</a>s &nbsp;there are two new examples:&nbsp;</span></li><ul><li><span style="background-color: rgb(255, 255, 255);"><a href="http://localhost/noscript/flows/searchcart" class="_noAutoRefresh" title="" target="">Shopping with data tier, queries and full text search</a>:&nbsp;A shopping example completed with a dynamic catalog stored using TCache&nbsp;<i><a class="_noAutoRefresh" href="http://haskell-web.blogspot.com.es/2013/04/mflow-what-about-data-tier-adding-it-to.html">(article)</a></i></span></li><li><a href="http://localhost/noscript/flows/initialconfig" class="_noAutoRefresh" title="" target="">Initial Configuration in session parameters</a>:&nbsp;the user is asked for some questions initially that never will be asked again unless he likes to change them (stored in session parameters)</li></ul><li>A&nbsp;<a href="https://www.fpcomplete.com/business/blog/guest-post-solve-integration-problem/" title="" target="">post&nbsp;</a>&nbsp;from me&nbsp;in the &nbsp;<a href="http://www.fpcomplete.com/" title="" target="">fpcomplete.com</a>&nbsp;blog about MFlow with introduction by Michael Snoyman (@snoyberg). Thanks to the people of FP Complete for their wonderful work in the advance of Haskell in Industry and the resources that they have developed for this purpose.&nbsp;In the post + Tutorial I explain&nbsp;<b>how Web applications are a particular case of what I call "the integration problem" that is caused by an inversion of control.</b><br></li><li>A new version with&nbsp;<i>runSecureNavigation&nbsp;</i>with &nbsp;SSL and TLS is available thanks to Aistis Raulinaitis in the&nbsp;<a href="https://github.com/agocorona/MFlow" title="" target="">github repository</a>.</li></ul></div></div><span><font face="helvetica" size="2"><div></div></font></span>