<h2>Automatic error trace generation in MFlow</h2><div class="\&quot;post-header\&quot;" style="\&quot;margin:" 0px="" 1.5em;="" color:="" rgb(34,="" 34,="" 34);="" line-height:="" 1.6;="" font-family:="" arial,="" tahoma,="" helvetica,="" freesans,="" sans-serif;="" font-size:="" 11px;="" background-color:="" rgb(255,="" 255,="" 255);\"=""><div class="\&quot;post-header-line-1\&quot;"></div></div><div class="\&quot;post-body" entry-content\"="" id="\&quot;post-body-7994414240739235079\&quot;" style="\&quot;width:" 730px;="" position:="" relative;="" background-color:="" rgb(255,="" 255,="" 255);\"="" itemprop="\&quot;description" articlebody\"=""><div style="\&quot;text-align:" justify;="" color:="" rgb(34,="" 34,="" 34);="" line-height:="" 1.4;="" font-family:="" arial,="" tahoma,="" helvetica,="" freesans,="" sans-serif;="" font-size:="" 13px;\"=""><span style="\&quot;line-height:" 1.4;\"="">To have&nbsp; the trace of an unexpected error is very important in Web development. Specially when the error&nbsp;has&nbsp;been produced&nbsp;in the exploitation environment. There is no way to make tests in a exploitation environment, so the error message is the only information available to fix it as soon as possible.</span><span style="\&quot;line-height:" 1.4;\"="">&nbsp;</span></div><div style="\&quot;text-align:" justify;\"=""><font color="\&quot;#222222\&quot;" face="\&quot;Arial," tahoma,="" helvetica,="" freesans,="" sans-serif\"="" size="\&quot;2\&quot;"><span style="\&quot;line-height:" 18px;\"=""><br></span></font></div><font color="\&quot;#222222\&quot;" face="\&quot;Arial," tahoma,="" helvetica,="" freesans,="" sans-serif\"="" size="\&quot;2\&quot;"><div style="\&quot;text-align:" justify;\"=""><font color="\&quot;#222222\&quot;" face="\&quot;Arial," tahoma,="" helvetica,="" freesans,="" sans-serif\"="" size="\&quot;2\&quot;"><span style="\&quot;line-height:" 1.4;\"="">Now MFlow permits the creation of execution traces. Not just call traces, but execution traces, whenever an error happens. It uses the package&nbsp;</span></font><a style="\&quot;color:" rgb(136,="" 136,="" 136);="" line-height:="" 1.4;="" font-size:="" 13px;="" text-decoration:="" none;\"="" href="\&quot;http://hackage.haskell.org/package/monadloc\&quot;">monadloc</a><font color="\&quot;#222222\&quot;" face="\&quot;Arial," tahoma,="" helvetica,="" freesans,="" sans-serif\"="" size="\&quot;2\&quot;"><span style="\&quot;line-height:" 1.4;\"="">&nbsp;from Pepe Iborra, used to produce stack traces in his package&nbsp;</span></font><a style="\&quot;color:" rgb(136,="" 136,="" 136);="" line-height:="" 1.4;="" font-size:="" 13px;="" text-decoration:="" none;\"="" href="\&quot;http://hackage.haskell.org/package/control-monad-exception\&quot;">control-monad-exception</a><font color="\&quot;#222222\&quot;" face="\&quot;Arial," tahoma,="" helvetica,="" freesans,="" sans-serif\"="" size="\&quot;2\&quot;"><span style="\&quot;line-height:" 1.4;\"="">. &nbsp;</span></font></div></font><div style="\&quot;text-align:" justify;\"=""><br></div><font color="\&quot;#222222\&quot;" face="\&quot;Arial," tahoma,="" helvetica,="" freesans,="" sans-serif\"="" size="\&quot;2\&quot;"><div style="\&quot;text-align:" justify;\"=""><span style="\&quot;line-height:" 1.4;\"="">Using MonadLoc, MFlow can produce entire traces instead of call stacks because his backtracking mechanism permits to&nbsp;&nbsp;run back the execution up to the beginning in case of an exception following the exact execution steps in reverse order. In this back-execution is when the trace is generated. When running normally, the tracing machinery does not affect the performance.</span></div></font><div style="\&quot;text-align:" justify;\"=""><br></div><font color="\&quot;#222222\&quot;" size="\&quot;2\&quot;"><div style="\&quot;text-align:" justify;\"=""><span style="\&quot;line-height:" 1.4;\"=""><font face="\&quot;Arial," tahoma,="" helvetica,="" freesans,="" sans-serif\"="">This is an example of what it is necessary in order to have execution traces in case of error.&nbsp; It is necessary to install the monadloc-pp and monadloc packages that install the </font><font face="\&quot;courier" new\"="">monadloc </font><font face="\&quot;Arial," tahoma,="" helvetica,="" freesans,="" sans-serif\"="">preprocessor and the </font><font face="\&quot;courier" new\"="">monadloc </font><font face="\&quot;Arial," tahoma,="" helvetica,="" freesans,="" sans-serif\"="">class respectively. There&nbsp;are two according changes in the user programs, the preprocessor directive and to include&nbsp; the </font><font face="\&quot;courier" new\"="">Control.Monad.Loc</font><font face="\&quot;Arial," tahoma,="" helvetica,="" freesans,="" sans-serif\"=""> module.</font></span></div><div style="\&quot;text-align:" justify;="" font-family:="" arial,="" tahoma,="" helvetica,="" freesans,="" sans-serif;\"=""><span style="\&quot;line-height:" 1.4;\"=""><br></span></div><div style="\&quot;text-align:" justify;\"=""><span style="\&quot;line-height:" 18px;\"=""><font face="\&quot;Arial," tahoma,="" helvetica,="" freesans,="" sans-serif\"="">EDIT: &nbsp;The persistent flows have no </font><font face="\&quot;courier" new\"="">MonadLoc </font><font face="\&quot;Arial," tahoma,="" helvetica,="" freesans,="" sans-serif\"="">instance, but since the persistent flows have forward logs, it is possible to trace the execution. Once an error is produced in a persistent flow, its log is moved to the error subdirectory within the .</font><font face="\&quot;courier" new\"="">tcachedata </font><font face="\&quot;Arial," tahoma,="" helvetica,="" freesans,="" sans-serif\"="">folder. &nbsp;Since a flow can have persistent and non persistent sections (depending where they use the </font><font face="\&quot;courier" new\"="">step </font><font face="\&quot;Arial," tahoma,="" helvetica,="" freesans,="" sans-serif\"="">statement) &nbsp;In the future, both logging mechanisms will be integrated in the same error message.</font></span></div></font></div>"